<?php


namespace Bets\Services\Bolao;


use Bets\Models\Bolao\Bolao;
use Bets\Services\BaseService;
use Carbon\Carbon;

class BolaoService extends BaseService
{
    protected $modelClass = Bolao::class;

    /**
     * @param array $bolaoDados
     * @return mixed
     * @throws \Exception
     */
    public function create(array $bolaoDados)
    {
        $partidas = [];
        $arrayPartidas = $bolaoDados['partidas'];
        unset($bolaoDados['partidas']);

        $dataLimite = dateToDatabase($arrayPartidas['data_partida'][0]);
        $dataFinalizar = dateToDatabase($arrayPartidas['data_partida'][0]);

        for ($i = 0; $i < count($arrayPartidas['data_partida']); $i++) {
            $dataPartida = dateToDatabase($arrayPartidas['data_partida'][$i]);
            $partidas[] = [
                'time_casa' => $arrayPartidas['time_casa'][$i],
                'time_fora' => $arrayPartidas['time_fora'][$i],
                'data_partida' => $dataPartida,
            ];

            $dataLimite = ($dataLimite > $dataPartida) ? $dataPartida : $dataLimite;

            $dataFinalizar = ($dataPartida > $dataFinalizar) ? $dataPartida : $dataFinalizar;
        }

        $somaPorcentagem = $bolaoDados['premio_1'] + $bolaoDados['premio_2'] + $bolaoDados['banca'] + $bolaoDados['vendedor'] + $bolaoDados['bonus_vendedor'] + $bolaoDados['sistema'];

        if ($somaPorcentagem !== 100) {
            throw new \Exception('A soma deve ser igual a 100%');
        }

        $bolaoDados['acumulado'] = $bolaoDados['inicial'] ?: 0;
        $bolaoDados['data_limite'] = Carbon::parse($dataLimite)->toDateTimeString();
        $bolaoDados['data_finalizar'] = Carbon::parse($dataFinalizar)->addHours(2)->toDateTimeString();

        $bolao = parent::create($bolaoDados); // TODO: Change the autogenerated stub

        $bolao->partidas()->createMany($partidas);

        return $bolao;
    }

    public function todos()
    {
        $query = $this->newQuery();

        $query->withCount(['apostas']);

        $query->orderByDesc('id');

        return $this->doQuery($query, 20, true);
    }

    public function abertos()
    {
        $query = $this->newQuery();

        $query->where('data_limite', '>', Carbon::now());

        $query->orderByDesc('id');

        return $this->doQuery($query, false, false);
    }

    public function encerrados()
    {
        $query = $this->newQuery();

        $query->where('data_limite', '<', Carbon::now());

        $query->orderByDesc('data_limite');

        return $this->doQuery($query, 10, false);
    }

    public function buscarVencedores($bolaoId)
    {
        $bolao = $this->find($bolaoId);

        $bolao->load(['apostas' => function ($query) use ($bolao) {
            $query->where('total_pontos', $bolao->pontuacao_1)
                ->orWhere('total_pontos', $bolao->pontuacao_2)
                ->where('situacao', '!=', 'cancelado')
                ->with('vendedor');
        }, 'partidas']);

        return $bolao;
    }

    public function salvarPlacares(array $dados, $bolaoId)
    {
        $bolao = $this->find($bolaoId);

        $i = 0;
        foreach ($bolao->partidas as $partida) {
            $partida->placar_casa = $dados['placar_casa'][$i];
            $partida->placar_fora = $dados['placar_fora'][$i];
            $partida->save();
            $i++;
        }

        return $bolao;
    }

    public function calcularResultados($bolaoId)
    {
        $bolao = $this->find($bolaoId);

        $pontuacao1 = 0;
        $pontuacao2 = 0;

        $partidas = $bolao->partidas;
        $apostas = app(\Bets\Models\Bolao\Aposta::class)
            ->where('bolao_id', $bolaoId)
            ->where('situacao', '!=', 'cancelado')
            ->with('palpites')
            ->get();

        foreach ($apostas as $aposta) {
            $i = 0;
            $pontos = 0;
            foreach ($aposta->palpites as $palpite) {
                if ($partidas[$i]['situacao'] === 'cancelada') {
                    $i++;
                    continue;
                }

                $pontos += $this->calcularPalpiteBolao($palpite, $partidas[$i], $bolao->tipo_bolao);
                $i++;
            }

            if ($pontos > 0) {
                if ($pontos >= $pontuacao1) {
                    $pontuacao1 = $pontos;
                } elseif ($pontos >= $pontuacao2) {
                    $pontuacao2 = $pontos;
                }

                $aposta->total_pontos = $pontos;
                $aposta->save();
            }
        }

        $bolao->update([
            'pontuacao_1' => $pontuacao1,
            'pontuacao_2' => $pontuacao2,
        ]);

        return $bolao;
    }

    private function calcularPalpiteBolao($palpite, $partida, $tipo = 'simples')
    {
        $placarCasa = $palpite['palpite_casa'] == $partida['placar_casa'];
        $placarFora = $palpite['palpite_fora'] == $partida['placar_fora'];

        if ($placarCasa && $placarFora && $tipo === 'completo') {
            return 20;
        }

        $vencedorPartida = 'X';
        if ($partida['placar_casa'] > $partida['placar_fora']) {
            $vencedorPartida = '1';
        } elseif ($partida['placar_casa'] < $partida['placar_fora']) {
            $vencedorPartida = '2';
        }

        $vencedorPalpite = 'X';
        if ($palpite['palpite_casa'] > $palpite['palpite_fora']) {
            $vencedorPalpite = '1';
        } elseif ($palpite['palpite_casa'] < $palpite['palpite_fora']) {
            $vencedorPalpite = '2';
        }

        return $vencedorPalpite === $vencedorPartida ? 10 : 0;
    }
}
